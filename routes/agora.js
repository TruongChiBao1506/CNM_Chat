const express = require('express');
const router = express.Router();
const { RtcTokenBuilder, RtcRole } = require('agora-access-token');

// L·∫•y t·ª´ Agora Console
const appID = "58a57bf3ead5405087e8444784154f5b";
const appCertificate = ""; // Thay b·∫±ng App Certificate c·ªßa b·∫°n

router.get('/rtc-token', (req, res) => {
    // Log ƒë·ªÉ debug
    console.log('üì¢ API token ƒë∆∞·ª£c g·ªçi v·ªõi params:', req.query);

    // L·∫•y th√¥ng tin t·ª´ query params
    const channelName = req.query.channel;
    const uid = parseInt(req.query.uid) || 0;
    const role = RtcRole.PUBLISHER;

    // Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
    if (!channelName) {
        console.error('‚ùå Thi·∫øu tham s·ªë channel');
        return res.status(400).json({ error: 'Channel name is required' });
    }

    // T·∫°o token v·ªõi th·ªùi h·∫°n 1 gi·ªù
    const expirationTimeInSeconds = 3600;
    const currentTimestamp = Math.floor(Date.now() / 1000);
    const privilegeExpireTimestamp = currentTimestamp + expirationTimeInSeconds;

    // T·∫°o token
    try {
        const token = RtcTokenBuilder.buildTokenWithUid(
            appID,
            appCertificate,
            channelName,
            uid,
            role,
            privilegeExpireTimestamp
        );

        console.log(`‚úÖ ƒê√£ t·∫°o token cho k√™nh ${channelName}, uid: ${uid}`);
        console.log(`‚úÖ Token: ${token.substring(0, 20)}...`);

        // Ki·ªÉm tra token c√≥ ph·∫£i l√† ASCII string
        if (!/^[\x00-\x7F]*$/.test(token)) {
            console.error('‚ùå Token kh√¥ng ph·∫£i l√† ASCII string');
            return res.status(500).json({ error: 'Generated token is not valid ASCII' });
        }

        return res.json({ token });
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o token:', error);
        return res.status(500).json({ error: 'Failed to generate token' });
    }
});

module.exports = router;